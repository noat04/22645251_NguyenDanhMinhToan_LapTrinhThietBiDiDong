C√†i ƒë·∫∑t

npx create-expo-app shopping-sqlite -t
cd shopping-sqlite
npx expo install expo-router react-native-safe-area-context react-native-screens expo-sqlite react-native-toast-message

ch·∫°y: npx expo start

MODELS

//types.ts

export type Product = {
  product_id: string;
  name: string;
  price: number;
  stock: number;
};

export type CartItem = {
  id: number;
  product_id: string;
  name: string;
  price: number;
  qty: number;
  stock: number;
};
export type Order = {
  id: number;
  note?: string;
  total: number;
  created_at: string;
};

export type OrderItem = {
  id: number;
  order_id: number;
  product_id: string;
  qty: number;
  unit_price: number;
  line_total: number;
  name?: string; // ƒê·ªÉ JOIN hi·ªÉn th·ªã t√™n s·∫£n ph·∫©m
};

DB

//db.ts

import * as SQLite from "expo-sqlite";
const db = SQLite.openDatabaseSync("mydatabase.db");

export async function initDB() {
    await db.execAsync(`
        CREATE TABLE IF NOT EXISTS products (
            product_id TEXT PRIMARY KEY NOT NULL,
            name TEXT NOT NULL,
            price REAL NOT NULL CHECK (price >= 0),
            stock INTEGER NOT NULL CHECK (stock >= 0)
        );
        CREATE TABLE IF NOT EXISTS cart_items(
            id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
            product_id TEXT NOT NULL,
            qty INTEGER NOT NULL CHECK (qty >0),
            UNIQUE(product_id),
            FOREIGN KEY (product_id) REFERENCES products(product_id)
        );
        CREATE TABLE IF NOT EXISTS orders(
            id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
            note TEXT,
            total REAL NOT NULL DEFAULT 0,
            created_at TEXT NOT NULL DEFAULT (datetime('now'))
        );
        CREATE TABLE IF NOT EXISTS order_items(
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            order_id INTEGER NOT NULL,
            product_id INTEGER NOT NULL, 
            qty INTEGER NOT NULL CHECK (qty >0),
            unit_price REAL NOT NULL CHECK (unit_price >=0),
            line_total REAL NOT NULL CHECK (line_total >=0),
            FOREIGN KEY (order_id) REFERENCES orders(id) ON DELETE CASCADE,
            FOREIGN KEY (product_id) REFERENCES products(product_id) ON DELETE RESTRICT
        );
    `);
}
export async function seedProducts() {
    const result = await db.getAllAsync<{ count: number }>("SELECT COUNT(*) as count FROM products;");
    if (result[0].count === 0) {
        const products = [
            { id: "p1", name: "Apple", price: 5000, stock: 100 },
            { id: "p2", name: "Banana", price: 3000, stock: 150 },
            { id: "p3", name: "Orange", price: 4000, stock: 120 },
        ];
        for (const product of products) {
            await db.runAsync(
                `INSERT INTO products (product_id, name, price, stock) VALUES (?, ?, ?, ?);`,
                [product.id, product.name, product.price, product.stock]
            );
        }
    }
}
export default db;

//product.repo.ts

import db from "../db/db";
import { Product } from "../models/types";

export async function getAllProducts(): Promise<Product[]> {
  return await db.getAllAsync("SELECT * FROM products");
}
export async function findProductsByName(name: string): Promise<Product[]> {
  const query = `
    SELECT * FROM products
    WHERE LOWER(name) LIKE LOWER(?)
  `;
  const params = [`%${name}%`];
  return await db.getAllAsync(query, params);
}

//cart.repo.ts
import { CartItem } from "../models/types";
import db from "./db";

// üõí L·∫•y danh s√°ch gi·ªè h√†ng
export const getCart = async (): Promise<CartItem[]> =>
  db.getAllAsync(`
    SELECT c.id, c.product_id, p.name, p.price, c.qty, p.stock
    FROM cart_items c
    JOIN products p ON c.product_id = p.product_id
  `);

// ‚ûï Th√™m s·∫£n ph·∫©m v√†o gi·ªè (ki·ªÉm tra t·ªìn kho)
export async function addToCart(productId: string): Promise<boolean> {
  const product = await db.getFirstAsync<{ stock: number; name: string }>(
    "SELECT stock, name FROM products WHERE product_id = ?", [productId]
  );
  if (!product) return console.warn("‚ö†Ô∏è S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i"), false;
  if (product.stock <= 0) return console.warn(`‚ö†Ô∏è "${product.name}" h·∫øt h√†ng`), false;

  const existing = await db.getFirstAsync<{ qty: number }>(
    "SELECT qty FROM cart_items WHERE product_id = ?", [productId]
  );

  if (existing) {
    if (existing.qty >= product.stock)
      return console.warn(`‚ö†Ô∏è V∆∞·ª£t qu√° t·ªìn kho (${product.stock})`), false;
    await db.runAsync("UPDATE cart_items SET qty = qty + 1 WHERE product_id = ?", [productId]);
  } else {
    await db.runAsync("INSERT INTO cart_items(product_id, qty) VALUES (?, 1)", [productId]);
  }
  return true;
}

// üîÑ C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng trong gi·ªè (ki·ªÉm tra t·ªìn kho)
export async function updateQty(id: number, qty: number): Promise<boolean> {
  const cartItem = await db.getFirstAsync<{ product_id: string; stock: number }>(
    `SELECT c.product_id, p.stock FROM cart_items c
     JOIN products p ON c.product_id = p.product_id WHERE c.id = ?`, [id]
  );
  if (!cartItem) return console.warn("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m"), false;
  if (qty > cartItem.stock) return console.warn(`‚ö†Ô∏è V∆∞·ª£t qu√° t·ªìn kho (${cartItem.stock})`), false;

  await db.runAsync(
    qty <= 0 ? "DELETE FROM cart_items WHERE id = ?" : "UPDATE cart_items SET qty = ? WHERE id = ?",
    qty <= 0 ? [id] : [qty, id]
  );
  return true;
}

//orders.repo.ts
import { CartItem, Order, OrderItem } from "../models/types";
import db from "./db";

// üßæ 1. Danh s√°ch ƒë∆°n h√†ng
export const listOrders = async (): Promise<Order[]> =>
  db.getAllAsync("SELECT id, note, total, created_at FROM orders ORDER BY created_at DESC");

// üßæ 2. Chi ti·∫øt ƒë∆°n h√†ng + s·∫£n ph·∫©m
export async function getOrderDetail(orderId: number) {
  const order = await db.getFirstAsync<Order>(
    "SELECT id, note, total, created_at FROM orders WHERE id = ?", [orderId]
  );
  if (!order) return { order: null, items: [] };

  const items = await db.getAllAsync<OrderItem>(
    `SELECT oi.id, oi.order_id, oi.product_id, p.name, oi.qty, oi.unit_price, oi.line_total
     FROM order_items oi JOIN products p ON oi.product_id = p.product_id
     WHERE oi.order_id = ?`, [orderId]
  );
  return { order, items };
}

// üßæ 3. T·∫°o ƒë∆°n h√†ng t·ª´ gi·ªè h√†ng
export async function createOrder(items: CartItem[], note?: string) {
  if (!items.length) throw new Error("‚ùå Gi·ªè h√†ng tr·ªëng!");

  const total = items.reduce((t, i) => t + i.price * i.qty, 0);
  const { lastInsertRowId: orderId } = await db.runAsync(
    "INSERT INTO orders (note, total) VALUES (?, ?)", [note || "", total]
  );
  if (!orderId) throw new Error("‚ùå L·ªói khi t·∫°o ƒë∆°n h√†ng!");

  for (const i of items) {
    const lineTotal = i.price * i.qty;
    await db.runAsync(
      `INSERT INTO order_items(order_id, product_id, qty, unit_price, line_total)
       VALUES (?, ?, ?, ?, ?)`,
      [orderId, i.product_id, i.qty, i.price, lineTotal]
    );
    await db.runAsync("UPDATE products SET stock = stock - ? WHERE product_id = ?", [i.qty, i.product_id]);
  }

  await db.runAsync("DELETE FROM cart_items");
  console.log(`‚úÖ T·∫°o ƒë∆°n h√†ng #${orderId} th√†nh c√¥ng!`);
  return orderId;
}

// üßæ 4. C·∫≠p nh·∫≠t ghi ch√∫ / t·ªïng ti·ªÅn
export async function updateOrder(id: number, note?: string, total?: number) {
  const f = [], p: any[] = [];
  if (note !== undefined) f.push("note = ?"), p.push(note);
  if (total !== undefined) f.push("total = ?"), p.push(total);
  if (!f.length) return false;
  p.push(id);
  await db.runAsync(`UPDATE orders SET ${f.join(", ")} WHERE id = ?`, p);
  return true;
}

// üßæ 5. X√≥a ƒë∆°n h√†ng
export const deleteOrder = async (id: number) => (
  await db.runAsync("DELETE FROM orders WHERE id = ?", [id]), true
);

// üßæ 6. Danh s√°ch s·∫£n ph·∫©m trong ƒë∆°n
export const listOrderItems = async (orderId: number) =>
  db.getAllAsync(
    `SELECT oi.id, oi.order_id, oi.product_id, p.name, oi.qty, oi.unit_price, oi.line_total
     FROM order_items oi JOIN products p ON oi.product_id = p.product_id
     WHERE oi.order_id = ?`, [orderId]
  );


//_layout.tsx (app/_layout)

import FontAwesome from '@expo/vector-icons/FontAwesome';
import { DarkTheme, DefaultTheme, ThemeProvider } from '@react-navigation/native';
import { useFonts } from 'expo-font';
import { Stack } from 'expo-router';
import * as SplashScreen from 'expo-splash-screen';
import { useEffect } from 'react';
import 'react-native-reanimated';
import Toast from "react-native-toast-message";
import { useColorScheme } from '@/components/useColorScheme';

export {
  // Catch any errors thrown by the Layout component.
  ErrorBoundary
} from 'expo-router';

export const unstable_settings = {
  // Ensure that reloading on `/modal` keeps a back button present.
  initialRouteName: '(tabs)',
};

// Prevent the splash screen from auto-hiding before asset loading is complete.
SplashScreen.preventAutoHideAsync();

export default function RootLayout() {
  const [loaded, error] = useFonts({
    SpaceMono: require('../assets/fonts/SpaceMono-Regular.ttf'),
    ...FontAwesome.font,
  });

  // Expo Router uses Error Boundaries to catch errors in the navigation tree.
  useEffect(() => {
    if (error) throw error;
  }, [error]);

  useEffect(() => {
    if (loaded) {
      SplashScreen.hideAsync();
    }
  }, [loaded]);

  if (!loaded) {
    return null;
  }

  return <RootLayoutNav />;
}

function RootLayoutNav() {
  const colorScheme = useColorScheme();

  return (
    <>
    <ThemeProvider value={colorScheme === 'dark' ? DarkTheme : DefaultTheme}>
      <Stack>
        <Stack.Screen name="(tabs)" options={{ headerShown: false }} />
        <Stack.Screen name="modal" options={{ presentation: 'modal' }} />
        <Stack.Screen name="cart" options={{ title: 'Gi·ªè h√†ng' }} />
        <Stack.Screen name="invoice" options={{ title: 'Ho√° ƒë∆°n' }} />
      </Stack>
    </ThemeProvider>
     <Toast />
    </>
  );
}


//_layout.tsx (app/(tabs)/_layout.tsx)
import FontAwesome from '@expo/vector-icons/FontAwesome';
import { Link, Tabs } from 'expo-router';
import React from 'react';
import { Pressable } from 'react-native';

import { useClientOnlyValue } from '@/components/useClientOnlyValue';
import { useColorScheme } from '@/components/useColorScheme';
import Colors from '@/constants/Colors';

// You can explore the built-in icon families and icons on the web at https://icons.expo.fyi/
function TabBarIcon(props: {
  name: React.ComponentProps<typeof FontAwesome>['name'];
  color: string;
}) {
  return <FontAwesome size={28} style={{ marginBottom: -3 }} {...props} />;
}

export default function TabLayout() {
  const colorScheme = useColorScheme();

  return (
    <Tabs
      screenOptions={{
        tabBarActiveTintColor: Colors[colorScheme ?? 'light'].tint,
        // Disable the static render of the header on web
        // to prevent a hydration error in React Navigation v6.
        headerShown: useClientOnlyValue(false, true),
      }}>
      <Tabs.Screen
        name="index"
        options={{
          title: 'Tab One',
          tabBarIcon: ({ color }) => <TabBarIcon name="code" color={color} />,
          headerRight: () => (
            <Link href="/modal" asChild>
              <Pressable>
                {({ pressed }) => (
                  <FontAwesome
                    name="info-circle"
                    size={25}
                    color={Colors[colorScheme ?? 'light'].text}
                    style={{ marginRight: 15, opacity: pressed ? 0.5 : 1 }}
                  />
                )}
              </Pressable>
            </Link>
          ),
        }}
      />
      <Tabs.Screen
        name="order"
        options={{
          title: 'Ho√° ƒë∆°n',
          tabBarIcon: ({ color }) => <TabBarIcon name="code" color={color} />,
        }}
      />
    </Tabs>
  );
}

//index.tsx (app/(tabs)/index.tsx)

import { useRouter } from "expo-router";
import React, { useEffect, useState } from "react";
import {
  FlatList, Text, TextInput,
  TouchableOpacity, View
} from "react-native";
import Toast from "react-native-toast-message";
import { addToCart } from "../../src/db/cart.repo";
import { initDB, seedProducts } from "../../src/db/db";
import { findProductsByName, getAllProducts } from "../../src/db/product.repo";
import { Product } from "../../src/models/types";

export default function ProductScreen() {
  const [products, setProducts] = useState<Product[]>([]);
  const [search, setSearch] = useState("");
  const router = useRouter();

  useEffect(() => {
    (async () => {
      await initDB();
      await seedProducts();
      const list = await getAllProducts();
      setProducts(list);
    })();
  }, []);

  useEffect(() => {
    const t = setTimeout(async () => {
      const list = search ? await findProductsByName(search) : await getAllProducts();
      setProducts(list);
    }, 300);
    return () => clearTimeout(t);
  }, [search]);

  const handleAdd = async (p: Product) => {
    const ok = await addToCart(p.product_id);
    Toast.show({
      type: ok ? "success" : "error",
      text1: ok ? "ƒê√£ th√™m v√†o gi·ªè üéâ" : "H·∫øt h√†ng",
      text2: ok ? p.name : "S·∫£n ph·∫©m ƒë√£ h·∫øt h√†ng ho·∫∑c v∆∞·ª£t t·ªìn kho",
      position: "bottom",
      visibilityTime: 1200
    });
  };

  return (
    <View style={{ flex: 1, padding: 16 }}>
      {/* Header */}
      <View style={{ flexDirection: "row", justifyContent: "space-between", marginBottom: 10 }}>
        <Text style={{ fontSize: 20, fontWeight: "bold" }}>S·∫£n ph·∫©m</Text>
        <TouchableOpacity onPress={() => router.push("/cart")}>
          <Text style={{ backgroundColor: "blue", color: "white", padding: 8, borderRadius: 6 }}>Gi·ªè h√†ng</Text>
        </TouchableOpacity>
      </View>

      {/* Search */}
      <TextInput
        placeholder="T√¨m s·∫£n ph·∫©m..."
        value={search}
        onChangeText={setSearch}
        style={{
          borderWidth: 1, borderColor: "#ccc", borderRadius: 6,
          paddingHorizontal: 10, height: 40, marginBottom: 10
        }}
      />

      {/* Product list */}
      <FlatList
        data={products}
        keyExtractor={i => i.product_id}
        renderItem={({ item }) => (
          <View
            style={{
              flexDirection: "row",
              justifyContent: "space-between",
              backgroundColor: "white",
              padding: 10,
              marginBottom: 8,
              borderRadius: 8
            }}
          >
            <View>
              <Text>{item.name}</Text>
              <Text>{item.price.toLocaleString()}‚Ç´</Text>
              <Text>T·ªìn kho: {item.stock}</Text>
            </View>
            <TouchableOpacity
              onPress={() => handleAdd(item)}
              disabled={item.stock === 0}
              style={{
                backgroundColor: item.stock === 0 ? "gray" : "green",
                padding: 8,
                borderRadius: 6
              }}
            >
              <Text style={{ color: "white" }}>
                {item.stock === 0 ? "H·∫øt" : "+ Th√™m"}
              </Text>
            </TouchableOpacity>
          </View>
        )}
      />
      <Toast />
    </View>
  );
}

//orders.tsx (app/(tabs)/orders.tsx)

import { useFocusEffect, useRouter } from "expo-router";
import { useCallback, useState } from "react";
import { FlatList, Text, TouchableOpacity, View } from "react-native";
import { listOrders } from "../../src/db/orders.repo";
import { Order } from "../../src/models/types";

export default function OrderScreen() {
  const [orders, setOrders] = useState<Order[]>([]);
  const router = useRouter();

  useFocusEffect(
    useCallback(() => {
      listOrders().then(setOrders);
    }, [])
  );

  return (
    <View style={{ flex: 1, padding: 16 }}>
      <Text style={{ fontSize: 22, fontWeight: "700", marginBottom: 12 }}>
        Danh s√°ch ho√° ƒë∆°n
      </Text>

      <FlatList
        data={orders}
        keyExtractor={(i) => i.id.toString()}
        renderItem={({ item }) => (
          <TouchableOpacity
            style={{
              flexDirection: "row",
              justifyContent: "space-between",
              backgroundColor: "#fff",
              padding: 14,
              borderRadius: 10,
              marginBottom: 10,
            }}
          >
            <View>
              <Text style={{ fontSize: 16, fontWeight: "600" }}>
                ƒê∆°n #{item.id}
              </Text>
              <Text style={{ fontSize: 13, color: "#555" }}>
                Ghi ch√∫: {item.note || "Kh√¥ng c√≥"}
              </Text>
              <Text style={{ fontSize: 12, color: "#777" }}>
                {item.created_at}
              </Text>
            </View>

            <Text style={{ color: "red", fontWeight: "700" }}>
              {(item.total ?? 0).toLocaleString()}‚Ç´
            </Text>
          </TouchableOpacity>
        )}
        ListEmptyComponent={
          <Text style={{ textAlign: "center", marginTop: 40, color: "#666" }}>
            Ch∆∞a c√≥ ho√° ƒë∆°n.
          </Text>
        }
      />
    </View>
  );
}

//cart.tsx (app/cart.tsx)

import { useFocusEffect } from "expo-router";
import { useCallback, useEffect, useState } from "react";
import { Alert, FlatList, Text, TouchableOpacity, View } from "react-native";
import { getCart, updateQty } from "../src/db/cart.repo";
import { createOrder } from "../src/db/orders.repo";
import { CartItem } from "../src/models/types";

export default function CartScreen() {
  const [cart, setCart] = useState<CartItem[]>([]);
  const loadCart = async () => setCart(await getCart());
  useEffect(() => { loadCart(); }, []);
  useFocusEffect(useCallback(() => { loadCart(); }, []));

  const total = cart.reduce((sum, i) => sum + i.price * i.qty, 0);

  const changeQty = async (id: number, qty: number, stock: number) => {
    if (qty > stock) return Alert.alert("H·∫øt h√†ng");
    if (qty < 1)
      return Alert.alert("Xo√° s·∫£n ph·∫©m", "B·∫°n mu·ªën xo√° kh·ªèi gi·ªè?", [
        { text: "H·ªßy" },
        { text: "Xo√°", onPress: async () => { await updateQty(id, 0); loadCart(); } },
      ]);
    await updateQty(id, qty);
    loadCart();
  };

  const checkout = async () => {
    try {
      const orderId = await createOrder(cart);
      Alert.alert("Th√†nh c√¥ng", `ƒê∆°n h√†ng #${orderId} ƒë√£ ƒë∆∞·ª£c t·∫°o`);
      loadCart();
    } catch {
      Alert.alert("L·ªói", "Kh√¥ng th·ªÉ t·∫°o ƒë∆°n h√†ng");
    }
  };

  return (
    <View style={{ flex: 1, padding: 20 }}>
      <Text style={{ fontSize: 20, fontWeight: "bold", marginBottom: 10 }}>üõí Gi·ªè h√†ng c·ªßa b·∫°n</Text>

      {cart.length === 0 ? (
        <Text style={{ textAlign: "center", color: "#666", marginTop: 30 }}>Ch∆∞a c√≥ s·∫£n ph·∫©m n√†o.</Text>
      ) : (
        <FlatList
          data={cart}
          keyExtractor={(i) => i.id.toString()}
          renderItem={({ item }) => (
            <View style={{ borderWidth: 1, borderColor: "#ccc", borderRadius: 6, padding: 10, marginVertical: 6 }}>
              <Text style={{ fontWeight: "bold" }}>{item.name}</Text>
              <Text>{item.price}‚Ç´ x {item.qty}</Text>
              <Text style={{ color: "#666" }}>T·ªìn kho: {item.stock}</Text>

              <View style={{ flexDirection: "row", alignItems: "center", marginTop: 6 }}>
                <TouchableOpacity
                  style={{ backgroundColor: "#007AFF", paddingHorizontal: 10, borderRadius: 4 }}
                  onPress={() => changeQty(item.id, item.qty - 1, item.stock)}
                >
                  <Text style={{ color: "#fff", fontWeight: "bold" }}>‚àí</Text>
                </TouchableOpacity>
                <Text style={{ marginHorizontal: 8 }}>{item.qty}</Text>
                <TouchableOpacity
                  style={{ backgroundColor: "#007AFF", paddingHorizontal: 10, borderRadius: 4 }}
                  onPress={() => changeQty(item.id, item.qty + 1, item.stock)}
                >
                  <Text style={{ color: "#fff", fontWeight: "bold" }}>Ôºã</Text>
                </TouchableOpacity>
              </View>
            </View>
          )}
        />
      )}

      <View style={{ marginTop: 20, alignItems: "center" }}>
        <Text style={{ fontSize: 18, fontWeight: "bold", marginBottom: 10 }}>T·ªïng c·ªông: {total}‚Ç´</Text>
        {cart.length > 0 && (
          <TouchableOpacity
            style={{ backgroundColor: "#28A745", paddingVertical: 10, paddingHorizontal: 30, borderRadius: 6 }}
            onPress={checkout}
          >
            <Text style={{ color: "#fff", fontWeight: "bold" }}>Thanh to√°n</Text>
          </TouchableOpacity>
        )}
      </View>
    </View>
  );
}



